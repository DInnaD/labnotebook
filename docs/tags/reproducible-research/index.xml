<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reproducible Research on Boettiger Group</title>
    <link>/tags/reproducible-research.html</link>
    <description>Recent content in Reproducible Research on Boettiger Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/reproducible-research/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/2014/05/07/integrating-github-project-repos-into-the-notebook/</link>
      <pubDate>Wed, 07 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/05/07/integrating-github-project-repos-into-the-notebook/</guid>
      <description>For a while now most of my active research is developed through .Rmd scripts connected to a particular project repository (something I discuss at length in deep challenges with knitr workflows). In the previous post I discuss creating a template package with a more transparent organization of files, such as moving manuscripts from inst/doc/ to simply manuscripts/. This left these exploratory analysis scripts in inst/examples in a similarly unintuitive place.</description>
    </item>
    
    <item>
      <title></title>
      <link>/2014/05/06/steps-to-a-more-portable-workflow/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/05/06/steps-to-a-more-portable-workflow/</guid>
      <description>While I have made my workflow for most of my ongoing projects available on Github for some time, this does not mean that it has been particularly easy to follow. Further, as I move from project to project I have slowly improved how I handle projects. For instance, I have since added unit tests (with testthat) and continuous integration (with travis-ci) to my repositories, and my handling of manuscripts has gotten more automated, with richer latex templates, yaml metadata, and simpler and more powerful makefiles.</description>
    </item>
    
    <item>
      <title></title>
      <link>/2014/02/19/cran-and-package-dependencies/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/02/19/cran-and-package-dependencies/</guid>
      <description>2014-02-19 R allows you to specify &amp;gt;= in a package dependency, not ==. The Comprehensive R Archive Network, CRAN, makes no requirement that package authors do not break their previous function API. For instance, if version 0.1 of the package had a function
foo &amp;lt;- function(x, y = 5){ ... }  then one could add new functionality in say, version 0.2 without breaking the existing API with a definition that looked like:</description>
    </item>
    
  </channel>
</rss>